/*--------------------------------------------------------------*/
/* 								*/
/*		compute_transmissivity_curve			*/
/*								*/
/*	NAME							*/
/*	compute_transmissivity_curve - estimates transmissivity	*/
/*		assuming an exponential decay of transmivivity	*/
/*		with depth - note returned value is 		*/
/*		relative transmissivity (i.e per unit		*/
/*		Ksat at the surface)				*/
/*								*/
/*								*/
/*	SYNOPSIS						*/
/*	compute_transmissivity_curve(				*/
/*				double	,			*/
/*				double	,			*/
/*				double	)			*/
/*								*/
/*	returns:						*/
/*	transmissivity - (unitless) multiplier for Ksat0 	*/
/*		to calculate transmissivity over range of	*/
/*		depths specified				*/
/*								*/
/*	OPTIONS							*/
/*	double	m - Ksat decay parameter			*/
/*	double	z - (m) depth to the water table		*/
/*	double  D - maximum depth				*/
/*								*/
/*	DESCRIPTION						*/
/*								*/
/*	computes transmissivity multiplier over range of 	*/
/*	depths between z and D; assumes an exponential decay	*/
/*	of Ksat with depth (decay given by m) until z_layer1	*/
/*	and then a constant conductivity below that layer	*/
/*	given by Ksat at the surface				*/
/*								*/
/*								*/
/*	PROGRAMMER NOTES					*/
/*								*/
/*--------------------------------------------------------------*/
#include <stdio.h>
#include <math.h>
#include "rhessys.h"
#include "phys_constants.h"

double	compute_transmissivity_curve(
					double	m,
					double  soil_depth,
					double	sat_deficit,
					double	soil_water_capacity)
{
	/*--------------------------------------------------------------*/
	/*	Local variable definition.				*/
	/*--------------------------------------------------------------*/
	double	T_bedrock, T_organic, T_intermediate;
	double	total_transmissivity;
	double 	s_organic;
	double	m_organic, m_bedrock;
	double  K_max_organic;

	s_organic = 0.0001;
	m_bedrock = 0.01;
	K_max_organic = 100;

	/*--------------------------------------------------------------*/
	/*	for do not include surface overland flow or detention   */
	/*	storage here						*/
	/*--------------------------------------------------------------*/

	if (sat_deficit <= ZERO) sat_deficit = 0.0;

	/*--------------------------------------------------------------*/
	/* if saturation deficit is greater than soil_water_capacity,	*/
 	/* fast rate of exponential decay in transmissivity		*/ 
	/*--------------------------------------------------------------*/

	if (sat_deficit > soil_water_capacity) 
		total_transmissivity = m_bedrock * exp (-1.0*sat_deficit / m_bedrock);
	else {
	/*--------------------------------------------------------------*/
	/* if saturation deficit is  less than soil_water_capacity,	*/
	/* 	but below the organic layer				*/
	/* include bedrock transmissivity and region of fairly constant */
	/*	conductivity 	 					*/
	/*--------------------------------------------------------------*/

		T_bedrock = m_bedrock * exp (-1.0*soil_water_capacity / m_bedrock);
		if (sat_deficit > s_organic) { 
			T_intermediate = (soil_water_capacity - sat_deficit);	
			total_transmissivity = T_intermediate + T_bedrock;
			}
		else {
	/*--------------------------------------------------------------*/
	/* if saturation deficit is  above the organic layer		*/
	/* include bedrock transmissivity and region of fairly constant */
	/*	conductivity up to organic layer and then		*/
	/*   and area of high conductivity in organic layer		*/	
	/*   with 1/2 organic layer a transition region			*/
	/*--------------------------------------------------------------*/
			m_organic = -1.0 * s_organic / (log( 1/K_max_organic)); 
			T_intermediate = (soil_water_capacity - s_organic);
			T_organic = K_max_organic * m_organic *
					( exp (-1.0 * sat_deficit / m_organic) -	
					exp (-1.0 * s_organic / m_organic) );
			total_transmissivity = T_bedrock + T_intermediate + T_organic;
		}
	}

			
	return(total_transmissivity);
} /*compute_transmissivity_curve*/
